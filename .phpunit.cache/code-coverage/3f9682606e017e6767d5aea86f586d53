a:6:{s:9:"classesIn";a:1:{s:56:"Doctrine\Instantiator\Exception\InvalidArgumentException";a:6:{s:4:"name";s:24:"InvalidArgumentException";s:14:"namespacedName";s:56:"Doctrine\Instantiator\Exception\InvalidArgumentException";s:9:"namespace";s:31:"Doctrine\Instantiator\Exception";s:9:"startLine";i:17;s:7:"endLine";i:52;s:7:"methods";a:3:{s:20:"fromNonExistingClass";a:6:{s:10:"methodName";s:20:"fromNonExistingClass";s:9:"signature";s:45:"fromNonExistingClass(string $className): self";s:10:"visibility";s:6:"public";s:9:"startLine";i:19;s:7:"endLine";i:30;s:3:"ccn";i:3;}s:17:"fromAbstractClass";a:6:{s:10:"methodName";s:17:"fromAbstractClass";s:9:"signature";s:57:"fromAbstractClass(ReflectionClass $reflectionClass): self";s:10:"visibility";s:6:"public";s:9:"startLine";i:37;s:7:"endLine";i:43;s:3:"ccn";i:1;}s:8:"fromEnum";a:6:{s:10:"methodName";s:8:"fromEnum";s:9:"signature";s:33:"fromEnum(string $className): self";s:10:"visibility";s:6:"public";s:9:"startLine";i:45;s:7:"endLine";i:51;s:3:"ccn";i:1;}}}}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:0:{}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:53;s:18:"commentLinesOfCode";i:8;s:21:"nonCommentLinesOfCode";i:45;}s:15:"ignoredLinesFor";a:1:{i:0;i:17;}s:17:"executableLinesIn";a:13:{i:21;i:1;i:22;i:2;i:25;i:3;i:26;i:4;i:29;i:5;i:39;i:6;i:40;i:6;i:41;i:6;i:42;i:6;i:47;i:7;i:48;i:7;i:49;i:7;i:50;i:7;}}