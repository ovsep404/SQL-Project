a:6:{s:9:"classesIn";a:0:{}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:185:{s:35:"PHPUnit\Framework\assertArrayHasKey";a:7:{s:4:"name";s:17:"assertArrayHasKey";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertArrayHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"assertArrayHasKey(int|string $key, array|\ArrayAccess $array, string $message): void";s:9:"startLine";i:83;s:7:"endLine";i:86;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertArrayNotHasKey";a:7:{s:4:"name";s:20:"assertArrayNotHasKey";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertArrayNotHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"assertArrayNotHasKey(int|string $key, array|\ArrayAccess $array, string $message): void";s:9:"startLine";i:100;s:7:"endLine";i:103;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertIsList";a:7:{s:4:"name";s:12:"assertIsList";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertIsList";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertIsList(mixed $array, string $message): void";s:9:"startLine";i:114;s:7:"endLine";i:117;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertContains";a:7:{s:4:"name";s:14:"assertContains";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"assertContains(mixed $needle, iterable $haystack, string $message): void";s:9:"startLine";i:131;s:7:"endLine";i:134;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertContainsEquals";a:7:{s:4:"name";s:20:"assertContainsEquals";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertContainsEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:78:"assertContainsEquals(mixed $needle, iterable $haystack, string $message): void";s:9:"startLine";i:145;s:7:"endLine";i:148;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertNotContains";a:7:{s:4:"name";s:17:"assertNotContains";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertNotContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"assertNotContains(mixed $needle, iterable $haystack, string $message): void";s:9:"startLine";i:162;s:7:"endLine";i:165;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertNotContainsEquals";a:7:{s:4:"name";s:23:"assertNotContainsEquals";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertNotContainsEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"assertNotContainsEquals(mixed $needle, iterable $haystack, string $message): void";s:9:"startLine";i:176;s:7:"endLine";i:179;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertContainsOnly";a:7:{s:4:"name";s:18:"assertContainsOnly";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertContainsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"assertContainsOnly(string $type, iterable $haystack, ?bool $isNativeType, string $message): void";s:9:"startLine";i:193;s:7:"endLine";i:196;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertContainsOnlyInstancesOf";a:7:{s:4:"name";s:29:"assertContainsOnlyInstancesOf";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertContainsOnlyInstancesOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertContainsOnlyInstancesOf(string $className, iterable $haystack, string $message): void";s:9:"startLine";i:210;s:7:"endLine";i:213;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertNotContainsOnly";a:7:{s:4:"name";s:21:"assertNotContainsOnly";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertNotContainsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:99:"assertNotContainsOnly(string $type, iterable $haystack, ?bool $isNativeType, string $message): void";s:9:"startLine";i:227;s:7:"endLine";i:230;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertCount";a:7:{s:4:"name";s:11:"assertCount";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertCount";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"assertCount(int $expectedCount, \Countable|iterable $haystack, string $message): void";s:9:"startLine";i:245;s:7:"endLine";i:248;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotCount";a:7:{s:4:"name";s:14:"assertNotCount";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotCount";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertNotCount(int $expectedCount, \Countable|iterable $haystack, string $message): void";s:9:"startLine";i:263;s:7:"endLine";i:266;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertEquals";a:7:{s:4:"name";s:12:"assertEquals";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertEquals(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:279;s:7:"endLine";i:282;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertEqualsCanonicalizing";a:7:{s:4:"name";s:26:"assertEqualsCanonicalizing";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"assertEqualsCanonicalizing(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:295;s:7:"endLine";i:298;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertEqualsIgnoringCase";a:7:{s:4:"name";s:24:"assertEqualsIgnoringCase";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:79:"assertEqualsIgnoringCase(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:311;s:7:"endLine";i:314;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertEqualsWithDelta";a:7:{s:4:"name";s:21:"assertEqualsWithDelta";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertEqualsWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:90:"assertEqualsWithDelta(mixed $expected, mixed $actual, float $delta, string $message): void";s:9:"startLine";i:327;s:7:"endLine";i:330;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertNotEquals";a:7:{s:4:"name";s:15:"assertNotEquals";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertNotEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertNotEquals(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:343;s:7:"endLine";i:346;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertNotEqualsCanonicalizing";a:7:{s:4:"name";s:29:"assertNotEqualsCanonicalizing";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertNotEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"assertNotEqualsCanonicalizing(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:359;s:7:"endLine";i:362;s:3:"ccn";i:1;}s:45:"PHPUnit\Framework\assertNotEqualsIgnoringCase";a:7:{s:4:"name";s:27:"assertNotEqualsIgnoringCase";s:14:"namespacedName";s:45:"PHPUnit\Framework\assertNotEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:82:"assertNotEqualsIgnoringCase(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:375;s:7:"endLine";i:378;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertNotEqualsWithDelta";a:7:{s:4:"name";s:24:"assertNotEqualsWithDelta";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertNotEqualsWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:93:"assertNotEqualsWithDelta(mixed $expected, mixed $actual, float $delta, string $message): void";s:9:"startLine";i:391;s:7:"endLine";i:394;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertObjectEquals";a:7:{s:4:"name";s:18:"assertObjectEquals";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertObjectEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertObjectEquals(object $expected, object $actual, string $method, string $message): void";s:9:"startLine";i:405;s:7:"endLine";i:408;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertEmpty";a:7:{s:4:"name";s:11:"assertEmpty";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertEmpty(mixed $actual, string $message): void";s:9:"startLine";i:424;s:7:"endLine";i:427;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotEmpty";a:7:{s:4:"name";s:14:"assertNotEmpty";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertNotEmpty(mixed $actual, string $message): void";s:9:"startLine";i:443;s:7:"endLine";i:446;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertGreaterThan";a:7:{s:4:"name";s:17:"assertGreaterThan";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertGreaterThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"assertGreaterThan(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:459;s:7:"endLine";i:462;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertGreaterThanOrEqual";a:7:{s:4:"name";s:24:"assertGreaterThanOrEqual";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertGreaterThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:79:"assertGreaterThanOrEqual(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:475;s:7:"endLine";i:478;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertLessThan";a:7:{s:4:"name";s:14:"assertLessThan";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertLessThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"assertLessThan(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:491;s:7:"endLine";i:494;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertLessThanOrEqual";a:7:{s:4:"name";s:21:"assertLessThanOrEqual";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertLessThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:76:"assertLessThanOrEqual(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:507;s:7:"endLine";i:510;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertFileEquals";a:7:{s:4:"name";s:16:"assertFileEquals";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertFileEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:73:"assertFileEquals(string $expected, string $actual, string $message): void";s:9:"startLine";i:524;s:7:"endLine";i:527;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertFileEqualsCanonicalizing";a:7:{s:4:"name";s:30:"assertFileEqualsCanonicalizing";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertFileEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"assertFileEqualsCanonicalizing(string $expected, string $actual, string $message): void";s:9:"startLine";i:541;s:7:"endLine";i:544;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertFileEqualsIgnoringCase";a:7:{s:4:"name";s:28:"assertFileEqualsIgnoringCase";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertFileEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"assertFileEqualsIgnoringCase(string $expected, string $actual, string $message): void";s:9:"startLine";i:558;s:7:"endLine";i:561;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertFileNotEquals";a:7:{s:4:"name";s:19:"assertFileNotEquals";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertFileNotEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:76:"assertFileNotEquals(string $expected, string $actual, string $message): void";s:9:"startLine";i:575;s:7:"endLine";i:578;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertFileNotEqualsCanonicalizing";a:7:{s:4:"name";s:33:"assertFileNotEqualsCanonicalizing";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertFileNotEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:90:"assertFileNotEqualsCanonicalizing(string $expected, string $actual, string $message): void";s:9:"startLine";i:592;s:7:"endLine";i:595;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertFileNotEqualsIgnoringCase";a:7:{s:4:"name";s:31:"assertFileNotEqualsIgnoringCase";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertFileNotEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertFileNotEqualsIgnoringCase(string $expected, string $actual, string $message): void";s:9:"startLine";i:609;s:7:"endLine";i:612;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertStringEqualsFile";a:7:{s:4:"name";s:22:"assertStringEqualsFile";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertStringEqualsFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:89:"assertStringEqualsFile(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:626;s:7:"endLine";i:629;s:3:"ccn";i:1;}s:54:"PHPUnit\Framework\assertStringEqualsFileCanonicalizing";a:7:{s:4:"name";s:36:"assertStringEqualsFileCanonicalizing";s:14:"namespacedName";s:54:"PHPUnit\Framework\assertStringEqualsFileCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:103:"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:643;s:7:"endLine";i:646;s:3:"ccn";i:1;}s:52:"PHPUnit\Framework\assertStringEqualsFileIgnoringCase";a:7:{s:4:"name";s:34:"assertStringEqualsFileIgnoringCase";s:14:"namespacedName";s:52:"PHPUnit\Framework\assertStringEqualsFileIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:101:"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:660;s:7:"endLine";i:663;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringNotEqualsFile";a:7:{s:4:"name";s:25:"assertStringNotEqualsFile";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringNotEqualsFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:92:"assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:677;s:7:"endLine";i:680;s:3:"ccn";i:1;}s:57:"PHPUnit\Framework\assertStringNotEqualsFileCanonicalizing";a:7:{s:4:"name";s:39:"assertStringNotEqualsFileCanonicalizing";s:14:"namespacedName";s:57:"PHPUnit\Framework\assertStringNotEqualsFileCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:106:"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:694;s:7:"endLine";i:697;s:3:"ccn";i:1;}s:55:"PHPUnit\Framework\assertStringNotEqualsFileIgnoringCase";a:7:{s:4:"name";s:37:"assertStringNotEqualsFileIgnoringCase";s:14:"namespacedName";s:55:"PHPUnit\Framework\assertStringNotEqualsFileIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:104:"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:711;s:7:"endLine";i:714;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsReadable";a:7:{s:4:"name";s:16:"assertIsReadable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsReadable(string $filename, string $message): void";s:9:"startLine";i:727;s:7:"endLine";i:730;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotReadable";a:7:{s:4:"name";s:19:"assertIsNotReadable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertIsNotReadable(string $filename, string $message): void";s:9:"startLine";i:743;s:7:"endLine";i:746;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsWritable";a:7:{s:4:"name";s:16:"assertIsWritable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsWritable(string $filename, string $message): void";s:9:"startLine";i:759;s:7:"endLine";i:762;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotWritable";a:7:{s:4:"name";s:19:"assertIsNotWritable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertIsNotWritable(string $filename, string $message): void";s:9:"startLine";i:775;s:7:"endLine";i:778;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertDirectoryExists";a:7:{s:4:"name";s:21:"assertDirectoryExists";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertDirectoryExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"assertDirectoryExists(string $directory, string $message): void";s:9:"startLine";i:791;s:7:"endLine";i:794;s:3:"ccn";i:1;}s:45:"PHPUnit\Framework\assertDirectoryDoesNotExist";a:7:{s:4:"name";s:27:"assertDirectoryDoesNotExist";s:14:"namespacedName";s:45:"PHPUnit\Framework\assertDirectoryDoesNotExist";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"assertDirectoryDoesNotExist(string $directory, string $message): void";s:9:"startLine";i:807;s:7:"endLine";i:810;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertDirectoryIsReadable";a:7:{s:4:"name";s:25:"assertDirectoryIsReadable";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertDirectoryIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertDirectoryIsReadable(string $directory, string $message): void";s:9:"startLine";i:823;s:7:"endLine";i:826;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertDirectoryIsNotReadable";a:7:{s:4:"name";s:28:"assertDirectoryIsNotReadable";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertDirectoryIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertDirectoryIsNotReadable(string $directory, string $message): void";s:9:"startLine";i:839;s:7:"endLine";i:842;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertDirectoryIsWritable";a:7:{s:4:"name";s:25:"assertDirectoryIsWritable";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertDirectoryIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertDirectoryIsWritable(string $directory, string $message): void";s:9:"startLine";i:855;s:7:"endLine";i:858;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertDirectoryIsNotWritable";a:7:{s:4:"name";s:28:"assertDirectoryIsNotWritable";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertDirectoryIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertDirectoryIsNotWritable(string $directory, string $message): void";s:9:"startLine";i:871;s:7:"endLine";i:874;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertFileExists";a:7:{s:4:"name";s:16:"assertFileExists";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertFileExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileExists(string $filename, string $message): void";s:9:"startLine";i:887;s:7:"endLine";i:890;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertFileDoesNotExist";a:7:{s:4:"name";s:22:"assertFileDoesNotExist";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertFileDoesNotExist";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"assertFileDoesNotExist(string $filename, string $message): void";s:9:"startLine";i:903;s:7:"endLine";i:906;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertFileIsReadable";a:7:{s:4:"name";s:20:"assertFileIsReadable";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertFileIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileIsReadable(string $file, string $message): void";s:9:"startLine";i:919;s:7:"endLine";i:922;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileIsNotReadable";a:7:{s:4:"name";s:23:"assertFileIsNotReadable";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileIsNotReadable(string $file, string $message): void";s:9:"startLine";i:935;s:7:"endLine";i:938;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertFileIsWritable";a:7:{s:4:"name";s:20:"assertFileIsWritable";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertFileIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileIsWritable(string $file, string $message): void";s:9:"startLine";i:951;s:7:"endLine";i:954;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileIsNotWritable";a:7:{s:4:"name";s:23:"assertFileIsNotWritable";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileIsNotWritable(string $file, string $message): void";s:9:"startLine";i:967;s:7:"endLine";i:970;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertTrue";a:7:{s:4:"name";s:10:"assertTrue";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertTrue(mixed $condition, string $message): void";s:9:"startLine";i:985;s:7:"endLine";i:988;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotTrue";a:7:{s:4:"name";s:13:"assertNotTrue";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertNotTrue(mixed $condition, string $message): void";s:9:"startLine";i:1003;s:7:"endLine";i:1006;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertFalse";a:7:{s:4:"name";s:11:"assertFalse";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertFalse(mixed $condition, string $message): void";s:9:"startLine";i:1021;s:7:"endLine";i:1024;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotFalse";a:7:{s:4:"name";s:14:"assertNotFalse";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertNotFalse(mixed $condition, string $message): void";s:9:"startLine";i:1039;s:7:"endLine";i:1042;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertNull";a:7:{s:4:"name";s:10:"assertNull";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:48:"assertNull(mixed $actual, string $message): void";s:9:"startLine";i:1057;s:7:"endLine";i:1060;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotNull";a:7:{s:4:"name";s:13:"assertNotNull";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertNotNull(mixed $actual, string $message): void";s:9:"startLine";i:1075;s:7:"endLine";i:1078;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertFinite";a:7:{s:4:"name";s:12:"assertFinite";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertFinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:50:"assertFinite(mixed $actual, string $message): void";s:9:"startLine";i:1091;s:7:"endLine";i:1094;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertInfinite";a:7:{s:4:"name";s:14:"assertInfinite";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertInfinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertInfinite(mixed $actual, string $message): void";s:9:"startLine";i:1107;s:7:"endLine";i:1110;s:3:"ccn";i:1;}s:27:"PHPUnit\Framework\assertNan";a:7:{s:4:"name";s:9:"assertNan";s:14:"namespacedName";s:27:"PHPUnit\Framework\assertNan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"assertNan(mixed $actual, string $message): void";s:9:"startLine";i:1123;s:7:"endLine";i:1126;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertObjectHasProperty";a:7:{s:4:"name";s:23:"assertObjectHasProperty";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertObjectHasProperty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"assertObjectHasProperty(string $propertyName, object $object, string $message): void";s:9:"startLine";i:1139;s:7:"endLine";i:1142;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertObjectNotHasProperty";a:7:{s:4:"name";s:26:"assertObjectNotHasProperty";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertObjectNotHasProperty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"assertObjectNotHasProperty(string $propertyName, object $object, string $message): void";s:9:"startLine";i:1155;s:7:"endLine";i:1158;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertSame";a:7:{s:4:"name";s:10:"assertSame";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertSame";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:65:"assertSame(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:1179;s:7:"endLine";i:1182;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotSame";a:7:{s:4:"name";s:13:"assertNotSame";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotSame";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:68:"assertNotSame(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:1197;s:7:"endLine";i:1200;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertInstanceOf";a:7:{s:4:"name";s:16:"assertInstanceOf";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"assertInstanceOf(string $expected, mixed $actual, string $message): void";s:9:"startLine";i:1221;s:7:"endLine";i:1224;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertNotInstanceOf";a:7:{s:4:"name";s:19:"assertNotInstanceOf";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertNotInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"assertNotInstanceOf(string $expected, mixed $actual, string $message): void";s:9:"startLine";i:1244;s:7:"endLine";i:1247;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertIsArray";a:7:{s:4:"name";s:13:"assertIsArray";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertIsArray";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertIsArray(mixed $actual, string $message): void";s:9:"startLine";i:1263;s:7:"endLine";i:1266;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertIsBool";a:7:{s:4:"name";s:12:"assertIsBool";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertIsBool";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:50:"assertIsBool(mixed $actual, string $message): void";s:9:"startLine";i:1282;s:7:"endLine";i:1285;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertIsFloat";a:7:{s:4:"name";s:13:"assertIsFloat";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertIsFloat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertIsFloat(mixed $actual, string $message): void";s:9:"startLine";i:1301;s:7:"endLine";i:1304;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertIsInt";a:7:{s:4:"name";s:11:"assertIsInt";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertIsInt";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertIsInt(mixed $actual, string $message): void";s:9:"startLine";i:1320;s:7:"endLine";i:1323;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertIsNumeric";a:7:{s:4:"name";s:15:"assertIsNumeric";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertIsNumeric";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"assertIsNumeric(mixed $actual, string $message): void";s:9:"startLine";i:1339;s:7:"endLine";i:1342;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsObject";a:7:{s:4:"name";s:14:"assertIsObject";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsObject";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertIsObject(mixed $actual, string $message): void";s:9:"startLine";i:1358;s:7:"endLine";i:1361;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsResource";a:7:{s:4:"name";s:16:"assertIsResource";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsResource(mixed $actual, string $message): void";s:9:"startLine";i:1377;s:7:"endLine";i:1380;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertIsClosedResource";a:7:{s:4:"name";s:22:"assertIsClosedResource";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertIsClosedResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertIsClosedResource(mixed $actual, string $message): void";s:9:"startLine";i:1396;s:7:"endLine";i:1399;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsString";a:7:{s:4:"name";s:14:"assertIsString";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertIsString(mixed $actual, string $message): void";s:9:"startLine";i:1415;s:7:"endLine";i:1418;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsScalar";a:7:{s:4:"name";s:14:"assertIsScalar";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsScalar";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertIsScalar(mixed $actual, string $message): void";s:9:"startLine";i:1434;s:7:"endLine";i:1437;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsCallable";a:7:{s:4:"name";s:16:"assertIsCallable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsCallable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsCallable(mixed $actual, string $message): void";s:9:"startLine";i:1453;s:7:"endLine";i:1456;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsIterable";a:7:{s:4:"name";s:16:"assertIsIterable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsIterable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsIterable(mixed $actual, string $message): void";s:9:"startLine";i:1472;s:7:"endLine";i:1475;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsNotArray";a:7:{s:4:"name";s:16:"assertIsNotArray";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsNotArray";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsNotArray(mixed $actual, string $message): void";s:9:"startLine";i:1491;s:7:"endLine";i:1494;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertIsNotBool";a:7:{s:4:"name";s:15:"assertIsNotBool";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertIsNotBool";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"assertIsNotBool(mixed $actual, string $message): void";s:9:"startLine";i:1510;s:7:"endLine";i:1513;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsNotFloat";a:7:{s:4:"name";s:16:"assertIsNotFloat";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsNotFloat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsNotFloat(mixed $actual, string $message): void";s:9:"startLine";i:1529;s:7:"endLine";i:1532;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsNotInt";a:7:{s:4:"name";s:14:"assertIsNotInt";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsNotInt";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertIsNotInt(mixed $actual, string $message): void";s:9:"startLine";i:1548;s:7:"endLine";i:1551;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertIsNotNumeric";a:7:{s:4:"name";s:18:"assertIsNotNumeric";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertIsNotNumeric";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:56:"assertIsNotNumeric(mixed $actual, string $message): void";s:9:"startLine";i:1567;s:7:"endLine";i:1570;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotObject";a:7:{s:4:"name";s:17:"assertIsNotObject";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotObject";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertIsNotObject(mixed $actual, string $message): void";s:9:"startLine";i:1586;s:7:"endLine";i:1589;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotResource";a:7:{s:4:"name";s:19:"assertIsNotResource";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsNotResource(mixed $actual, string $message): void";s:9:"startLine";i:1605;s:7:"endLine";i:1608;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertIsNotClosedResource";a:7:{s:4:"name";s:25:"assertIsNotClosedResource";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertIsNotClosedResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"assertIsNotClosedResource(mixed $actual, string $message): void";s:9:"startLine";i:1624;s:7:"endLine";i:1627;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotString";a:7:{s:4:"name";s:17:"assertIsNotString";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertIsNotString(mixed $actual, string $message): void";s:9:"startLine";i:1643;s:7:"endLine";i:1646;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotScalar";a:7:{s:4:"name";s:17:"assertIsNotScalar";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotScalar";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertIsNotScalar(mixed $actual, string $message): void";s:9:"startLine";i:1662;s:7:"endLine";i:1665;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotCallable";a:7:{s:4:"name";s:19:"assertIsNotCallable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotCallable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsNotCallable(mixed $actual, string $message): void";s:9:"startLine";i:1681;s:7:"endLine";i:1684;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotIterable";a:7:{s:4:"name";s:19:"assertIsNotIterable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotIterable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsNotIterable(mixed $actual, string $message): void";s:9:"startLine";i:1700;s:7:"endLine";i:1703;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertMatchesRegularExpression";a:7:{s:4:"name";s:30:"assertMatchesRegularExpression";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertMatchesRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:86:"assertMatchesRegularExpression(string $pattern, string $string, string $message): void";s:9:"startLine";i:1716;s:7:"endLine";i:1719;s:3:"ccn";i:1;}s:53:"PHPUnit\Framework\assertDoesNotMatchRegularExpression";a:7:{s:4:"name";s:35:"assertDoesNotMatchRegularExpression";s:14:"namespacedName";s:53:"PHPUnit\Framework\assertDoesNotMatchRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertDoesNotMatchRegularExpression(string $pattern, string $string, string $message): void";s:9:"startLine";i:1732;s:7:"endLine";i:1735;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertSameSize";a:7:{s:4:"name";s:14:"assertSameSize";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertSameSize";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:97:"assertSameSize(\Countable|iterable $expected, \Countable|iterable $actual, string $message): void";s:9:"startLine";i:1751;s:7:"endLine";i:1754;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertNotSameSize";a:7:{s:4:"name";s:17:"assertNotSameSize";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertNotSameSize";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"assertNotSameSize(\Countable|iterable $expected, \Countable|iterable $actual, string $message): void";s:9:"startLine";i:1770;s:7:"endLine";i:1773;s:3:"ccn";i:1;}s:63:"PHPUnit\Framework\assertStringContainsStringIgnoringLineEndings";a:7:{s:4:"name";s:45:"assertStringContainsStringIgnoringLineEndings";s:14:"namespacedName";s:63:"PHPUnit\Framework\assertStringContainsStringIgnoringLineEndings";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:102:"assertStringContainsStringIgnoringLineEndings(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1784;s:7:"endLine";i:1787;s:3:"ccn";i:1;}s:61:"PHPUnit\Framework\assertStringEqualsStringIgnoringLineEndings";a:7:{s:4:"name";s:43:"assertStringEqualsStringIgnoringLineEndings";s:14:"namespacedName";s:61:"PHPUnit\Framework\assertStringEqualsStringIgnoringLineEndings";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"assertStringEqualsStringIgnoringLineEndings(string $expected, string $actual, string $message): void";s:9:"startLine";i:1800;s:7:"endLine";i:1803;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileMatchesFormat";a:7:{s:4:"name";s:23:"assertFileMatchesFormat";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileMatchesFormat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:82:"assertFileMatchesFormat(string $format, string $actualFile, string $message): void";s:9:"startLine";i:1816;s:7:"endLine";i:1819;s:3:"ccn";i:1;}s:45:"PHPUnit\Framework\assertFileMatchesFormatFile";a:7:{s:4:"name";s:27:"assertFileMatchesFormatFile";s:14:"namespacedName";s:45:"PHPUnit\Framework\assertFileMatchesFormatFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:90:"assertFileMatchesFormatFile(string $formatFile, string $actualFile, string $message): void";s:9:"startLine";i:1832;s:7:"endLine";i:1835;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringMatchesFormat";a:7:{s:4:"name";s:25:"assertStringMatchesFormat";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringMatchesFormat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:80:"assertStringMatchesFormat(string $format, string $string, string $message): void";s:9:"startLine";i:1848;s:7:"endLine";i:1851;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertStringNotMatchesFormat";a:7:{s:4:"name";s:28:"assertStringNotMatchesFormat";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertStringNotMatchesFormat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"assertStringNotMatchesFormat(string $format, string $string, string $message): void";s:9:"startLine";i:1866;s:7:"endLine";i:1869;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertStringMatchesFormatFile";a:7:{s:4:"name";s:29:"assertStringMatchesFormatFile";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertStringMatchesFormatFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertStringMatchesFormatFile(string $formatFile, string $string, string $message): void";s:9:"startLine";i:1882;s:7:"endLine";i:1885;s:3:"ccn";i:1;}s:50:"PHPUnit\Framework\assertStringNotMatchesFormatFile";a:7:{s:4:"name";s:32:"assertStringNotMatchesFormatFile";s:14:"namespacedName";s:50:"PHPUnit\Framework\assertStringNotMatchesFormatFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message): void";s:9:"startLine";i:1900;s:7:"endLine";i:1903;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertStringStartsWith";a:7:{s:4:"name";s:22:"assertStringStartsWith";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertStringStartsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:77:"assertStringStartsWith(string $prefix, string $string, string $message): void";s:9:"startLine";i:1919;s:7:"endLine";i:1922;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringStartsNotWith";a:7:{s:4:"name";s:25:"assertStringStartsNotWith";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringStartsNotWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:80:"assertStringStartsNotWith(string $prefix, string $string, string $message): void";s:9:"startLine";i:1938;s:7:"endLine";i:1941;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertStringContainsString";a:7:{s:4:"name";s:26:"assertStringContainsString";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertStringContainsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"assertStringContainsString(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1952;s:7:"endLine";i:1955;s:3:"ccn";i:1;}s:56:"PHPUnit\Framework\assertStringContainsStringIgnoringCase";a:7:{s:4:"name";s:38:"assertStringContainsStringIgnoringCase";s:14:"namespacedName";s:56:"PHPUnit\Framework\assertStringContainsStringIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:95:"assertStringContainsStringIgnoringCase(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1966;s:7:"endLine";i:1969;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertStringNotContainsString";a:7:{s:4:"name";s:29:"assertStringNotContainsString";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertStringNotContainsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:86:"assertStringNotContainsString(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1980;s:7:"endLine";i:1983;s:3:"ccn";i:1;}s:59:"PHPUnit\Framework\assertStringNotContainsStringIgnoringCase";a:7:{s:4:"name";s:41:"assertStringNotContainsStringIgnoringCase";s:14:"namespacedName";s:59:"PHPUnit\Framework\assertStringNotContainsStringIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:98:"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1994;s:7:"endLine";i:1997;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertStringEndsWith";a:7:{s:4:"name";s:20:"assertStringEndsWith";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertStringEndsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"assertStringEndsWith(string $suffix, string $string, string $message): void";s:9:"startLine";i:2013;s:7:"endLine";i:2016;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertStringEndsNotWith";a:7:{s:4:"name";s:23:"assertStringEndsNotWith";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertStringEndsNotWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:78:"assertStringEndsNotWith(string $suffix, string $string, string $message): void";s:9:"startLine";i:2032;s:7:"endLine";i:2035;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertXmlFileEqualsXmlFile";a:7:{s:4:"name";s:26:"assertXmlFileEqualsXmlFile";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertXmlFileEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2050;s:7:"endLine";i:2053;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertXmlFileNotEqualsXmlFile";a:7:{s:4:"name";s:29:"assertXmlFileNotEqualsXmlFile";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertXmlFileNotEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:94:"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2067;s:7:"endLine";i:2070;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertXmlStringEqualsXmlFile";a:7:{s:4:"name";s:28:"assertXmlStringEqualsXmlFile";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertXmlStringEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:92:"assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml, string $message): void";s:9:"startLine";i:2084;s:7:"endLine";i:2087;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertXmlStringNotEqualsXmlFile";a:7:{s:4:"name";s:31:"assertXmlStringNotEqualsXmlFile";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertXmlStringNotEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:95:"assertXmlStringNotEqualsXmlFile(string $expectedFile, string $actualXml, string $message): void";s:9:"startLine";i:2101;s:7:"endLine";i:2104;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertXmlStringEqualsXmlString";a:7:{s:4:"name";s:30:"assertXmlStringEqualsXmlString";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertXmlStringEqualsXmlString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:93:"assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml, string $message): void";s:9:"startLine";i:2118;s:7:"endLine";i:2121;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertXmlStringNotEqualsXmlString";a:7:{s:4:"name";s:33:"assertXmlStringNotEqualsXmlString";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertXmlStringNotEqualsXmlString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml, string $message): void";s:9:"startLine";i:2135;s:7:"endLine";i:2138;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertThat";a:7:{s:4:"name";s:10:"assertThat";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertThat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"assertThat(mixed $value, PHPUnit\Framework\Constraint\Constraint $constraint, string $message): void";s:9:"startLine";i:2151;s:7:"endLine";i:2154;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertJson";a:7:{s:4:"name";s:10:"assertJson";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertJson";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertJson(string $actual, string $message): void";s:9:"startLine";i:2167;s:7:"endLine";i:2170;s:3:"ccn";i:1;}s:50:"PHPUnit\Framework\assertJsonStringEqualsJsonString";a:7:{s:4:"name";s:32:"assertJsonStringEqualsJsonString";s:14:"namespacedName";s:50:"PHPUnit\Framework\assertJsonStringEqualsJsonString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:97:"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message): void";s:9:"startLine";i:2183;s:7:"endLine";i:2186;s:3:"ccn";i:1;}s:53:"PHPUnit\Framework\assertJsonStringNotEqualsJsonString";a:7:{s:4:"name";s:35:"assertJsonStringNotEqualsJsonString";s:14:"namespacedName";s:53:"PHPUnit\Framework\assertJsonStringNotEqualsJsonString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson, string $message): void";s:9:"startLine";i:2199;s:7:"endLine";i:2202;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertJsonStringEqualsJsonFile";a:7:{s:4:"name";s:30:"assertJsonStringEqualsJsonFile";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertJsonStringEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:95:"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message): void";s:9:"startLine";i:2215;s:7:"endLine";i:2218;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertJsonStringNotEqualsJsonFile";a:7:{s:4:"name";s:33:"assertJsonStringNotEqualsJsonFile";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertJsonStringNotEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:98:"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message): void";s:9:"startLine";i:2231;s:7:"endLine";i:2234;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertJsonFileEqualsJsonFile";a:7:{s:4:"name";s:28:"assertJsonFileEqualsJsonFile";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertJsonFileEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:93:"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2247;s:7:"endLine";i:2250;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertJsonFileNotEqualsJsonFile";a:7:{s:4:"name";s:31:"assertJsonFileNotEqualsJsonFile";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertJsonFileNotEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2263;s:7:"endLine";i:2266;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalAnd";a:7:{s:4:"name";s:10:"logicalAnd";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalAnd";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:71:"logicalAnd(mixed $constraints): PHPUnit\Framework\Constraint\LogicalAnd";s:9:"startLine";i:2270;s:7:"endLine";i:2273;s:3:"ccn";i:1;}s:27:"PHPUnit\Framework\logicalOr";a:7:{s:4:"name";s:9:"logicalOr";s:14:"namespacedName";s:27:"PHPUnit\Framework\logicalOr";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"logicalOr(mixed $constraints): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2277;s:7:"endLine";i:2280;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalNot";a:7:{s:4:"name";s:10:"logicalNot";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalNot";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:104:"logicalNot(PHPUnit\Framework\Constraint\Constraint $constraint): PHPUnit\Framework\Constraint\LogicalNot";s:9:"startLine";i:2284;s:7:"endLine";i:2287;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalXor";a:7:{s:4:"name";s:10:"logicalXor";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalXor";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:71:"logicalXor(mixed $constraints): PHPUnit\Framework\Constraint\LogicalXor";s:9:"startLine";i:2291;s:7:"endLine";i:2294;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\anything";a:7:{s:4:"name";s:8:"anything";s:14:"namespacedName";s:26:"PHPUnit\Framework\anything";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"anything(): PHPUnit\Framework\Constraint\IsAnything";s:9:"startLine";i:2298;s:7:"endLine";i:2301;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isTrue";a:7:{s:4:"name";s:6:"isTrue";s:14:"namespacedName";s:24:"PHPUnit\Framework\isTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isTrue(): PHPUnit\Framework\Constraint\IsTrue";s:9:"startLine";i:2305;s:7:"endLine";i:2308;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\callback";a:7:{s:4:"name";s:8:"callback";s:14:"namespacedName";s:26:"PHPUnit\Framework\callback";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"callback(callable $callback): PHPUnit\Framework\Constraint\Callback";s:9:"startLine";i:2312;s:7:"endLine";i:2315;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\isFalse";a:7:{s:4:"name";s:7:"isFalse";s:14:"namespacedName";s:25:"PHPUnit\Framework\isFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"isFalse(): PHPUnit\Framework\Constraint\IsFalse";s:9:"startLine";i:2319;s:7:"endLine";i:2322;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isJson";a:7:{s:4:"name";s:6:"isJson";s:14:"namespacedName";s:24:"PHPUnit\Framework\isJson";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isJson(): PHPUnit\Framework\Constraint\IsJson";s:9:"startLine";i:2326;s:7:"endLine";i:2329;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isNull";a:7:{s:4:"name";s:6:"isNull";s:14:"namespacedName";s:24:"PHPUnit\Framework\isNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isNull(): PHPUnit\Framework\Constraint\IsNull";s:9:"startLine";i:2333;s:7:"endLine";i:2336;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\isFinite";a:7:{s:4:"name";s:8:"isFinite";s:14:"namespacedName";s:26:"PHPUnit\Framework\isFinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"isFinite(): PHPUnit\Framework\Constraint\IsFinite";s:9:"startLine";i:2340;s:7:"endLine";i:2343;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isInfinite";a:7:{s:4:"name";s:10:"isInfinite";s:14:"namespacedName";s:28:"PHPUnit\Framework\isInfinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isInfinite(): PHPUnit\Framework\Constraint\IsInfinite";s:9:"startLine";i:2347;s:7:"endLine";i:2350;s:3:"ccn";i:1;}s:23:"PHPUnit\Framework\isNan";a:7:{s:4:"name";s:5:"isNan";s:14:"namespacedName";s:23:"PHPUnit\Framework\isNan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:43:"isNan(): PHPUnit\Framework\Constraint\IsNan";s:9:"startLine";i:2354;s:7:"endLine";i:2357;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\containsEqual";a:7:{s:4:"name";s:13:"containsEqual";s:14:"namespacedName";s:31:"PHPUnit\Framework\containsEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:82:"containsEqual(mixed $value): PHPUnit\Framework\Constraint\TraversableContainsEqual";s:9:"startLine";i:2361;s:7:"endLine";i:2364;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\containsIdentical";a:7:{s:4:"name";s:17:"containsIdentical";s:14:"namespacedName";s:35:"PHPUnit\Framework\containsIdentical";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:90:"containsIdentical(mixed $value): PHPUnit\Framework\Constraint\TraversableContainsIdentical";s:9:"startLine";i:2368;s:7:"endLine";i:2371;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\containsOnly";a:7:{s:4:"name";s:12:"containsOnly";s:14:"namespacedName";s:30:"PHPUnit\Framework\containsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:80:"containsOnly(string $type): PHPUnit\Framework\Constraint\TraversableContainsOnly";s:9:"startLine";i:2375;s:7:"endLine";i:2378;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\containsOnlyInstancesOf";a:7:{s:4:"name";s:23:"containsOnlyInstancesOf";s:14:"namespacedName";s:41:"PHPUnit\Framework\containsOnlyInstancesOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"containsOnlyInstancesOf(string $className): PHPUnit\Framework\Constraint\TraversableContainsOnly";s:9:"startLine";i:2382;s:7:"endLine";i:2385;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\arrayHasKey";a:7:{s:4:"name";s:11:"arrayHasKey";s:14:"namespacedName";s:29:"PHPUnit\Framework\arrayHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"arrayHasKey(int|string $key): PHPUnit\Framework\Constraint\ArrayHasKey";s:9:"startLine";i:2389;s:7:"endLine";i:2392;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isList";a:7:{s:4:"name";s:6:"isList";s:14:"namespacedName";s:24:"PHPUnit\Framework\isList";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isList(): PHPUnit\Framework\Constraint\IsList";s:9:"startLine";i:2396;s:7:"endLine";i:2399;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\equalTo";a:7:{s:4:"name";s:7:"equalTo";s:14:"namespacedName";s:25:"PHPUnit\Framework\equalTo";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:59:"equalTo(mixed $value): PHPUnit\Framework\Constraint\IsEqual";s:9:"startLine";i:2403;s:7:"endLine";i:2406;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\equalToCanonicalizing";a:7:{s:4:"name";s:21:"equalToCanonicalizing";s:14:"namespacedName";s:39:"PHPUnit\Framework\equalToCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"equalToCanonicalizing(mixed $value): PHPUnit\Framework\Constraint\IsEqualCanonicalizing";s:9:"startLine";i:2410;s:7:"endLine";i:2413;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\equalToIgnoringCase";a:7:{s:4:"name";s:19:"equalToIgnoringCase";s:14:"namespacedName";s:37:"PHPUnit\Framework\equalToIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"equalToIgnoringCase(mixed $value): PHPUnit\Framework\Constraint\IsEqualIgnoringCase";s:9:"startLine";i:2417;s:7:"endLine";i:2420;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\equalToWithDelta";a:7:{s:4:"name";s:16:"equalToWithDelta";s:14:"namespacedName";s:34:"PHPUnit\Framework\equalToWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"equalToWithDelta(mixed $value, float $delta): PHPUnit\Framework\Constraint\IsEqualWithDelta";s:9:"startLine";i:2424;s:7:"endLine";i:2427;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\isEmpty";a:7:{s:4:"name";s:7:"isEmpty";s:14:"namespacedName";s:25:"PHPUnit\Framework\isEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"isEmpty(): PHPUnit\Framework\Constraint\IsEmpty";s:9:"startLine";i:2431;s:7:"endLine";i:2434;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isWritable";a:7:{s:4:"name";s:10:"isWritable";s:14:"namespacedName";s:28:"PHPUnit\Framework\isWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isWritable(): PHPUnit\Framework\Constraint\IsWritable";s:9:"startLine";i:2438;s:7:"endLine";i:2441;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isReadable";a:7:{s:4:"name";s:10:"isReadable";s:14:"namespacedName";s:28:"PHPUnit\Framework\isReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isReadable(): PHPUnit\Framework\Constraint\IsReadable";s:9:"startLine";i:2445;s:7:"endLine";i:2448;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\directoryExists";a:7:{s:4:"name";s:15:"directoryExists";s:14:"namespacedName";s:33:"PHPUnit\Framework\directoryExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"directoryExists(): PHPUnit\Framework\Constraint\DirectoryExists";s:9:"startLine";i:2452;s:7:"endLine";i:2455;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\fileExists";a:7:{s:4:"name";s:10:"fileExists";s:14:"namespacedName";s:28:"PHPUnit\Framework\fileExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"fileExists(): PHPUnit\Framework\Constraint\FileExists";s:9:"startLine";i:2459;s:7:"endLine";i:2462;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\greaterThan";a:7:{s:4:"name";s:11:"greaterThan";s:14:"namespacedName";s:29:"PHPUnit\Framework\greaterThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"greaterThan(mixed $value): PHPUnit\Framework\Constraint\GreaterThan";s:9:"startLine";i:2466;s:7:"endLine";i:2469;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\greaterThanOrEqual";a:7:{s:4:"name";s:18:"greaterThanOrEqual";s:14:"namespacedName";s:36:"PHPUnit\Framework\greaterThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"greaterThanOrEqual(mixed $value): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2473;s:7:"endLine";i:2476;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\identicalTo";a:7:{s:4:"name";s:11:"identicalTo";s:14:"namespacedName";s:29:"PHPUnit\Framework\identicalTo";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"identicalTo(mixed $value): PHPUnit\Framework\Constraint\IsIdentical";s:9:"startLine";i:2480;s:7:"endLine";i:2483;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\isInstanceOf";a:7:{s:4:"name";s:12:"isInstanceOf";s:14:"namespacedName";s:30:"PHPUnit\Framework\isInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:74:"isInstanceOf(string $className): PHPUnit\Framework\Constraint\IsInstanceOf";s:9:"startLine";i:2487;s:7:"endLine";i:2490;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isType";a:7:{s:4:"name";s:6:"isType";s:14:"namespacedName";s:24:"PHPUnit\Framework\isType";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"isType(string $type): PHPUnit\Framework\Constraint\IsType";s:9:"startLine";i:2494;s:7:"endLine";i:2497;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\lessThan";a:7:{s:4:"name";s:8:"lessThan";s:14:"namespacedName";s:26:"PHPUnit\Framework\lessThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:61:"lessThan(mixed $value): PHPUnit\Framework\Constraint\LessThan";s:9:"startLine";i:2501;s:7:"endLine";i:2504;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\lessThanOrEqual";a:7:{s:4:"name";s:15:"lessThanOrEqual";s:14:"namespacedName";s:33:"PHPUnit\Framework\lessThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"lessThanOrEqual(mixed $value): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2508;s:7:"endLine";i:2511;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\matchesRegularExpression";a:7:{s:4:"name";s:24:"matchesRegularExpression";s:14:"namespacedName";s:42:"PHPUnit\Framework\matchesRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:89:"matchesRegularExpression(string $pattern): PHPUnit\Framework\Constraint\RegularExpression";s:9:"startLine";i:2515;s:7:"endLine";i:2518;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\matches";a:7:{s:4:"name";s:7:"matches";s:14:"namespacedName";s:25:"PHPUnit\Framework\matches";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"matches(string $string): PHPUnit\Framework\Constraint\StringMatchesFormatDescription";s:9:"startLine";i:2522;s:7:"endLine";i:2525;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\stringStartsWith";a:7:{s:4:"name";s:16:"stringStartsWith";s:14:"namespacedName";s:34:"PHPUnit\Framework\stringStartsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:79:"stringStartsWith(string $prefix): PHPUnit\Framework\Constraint\StringStartsWith";s:9:"startLine";i:2529;s:7:"endLine";i:2532;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\stringContains";a:7:{s:4:"name";s:14:"stringContains";s:14:"namespacedName";s:32:"PHPUnit\Framework\stringContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"stringContains(string $string, bool $case): PHPUnit\Framework\Constraint\StringContains";s:9:"startLine";i:2536;s:7:"endLine";i:2539;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\stringEndsWith";a:7:{s:4:"name";s:14:"stringEndsWith";s:14:"namespacedName";s:32:"PHPUnit\Framework\stringEndsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"stringEndsWith(string $suffix): PHPUnit\Framework\Constraint\StringEndsWith";s:9:"startLine";i:2543;s:7:"endLine";i:2546;s:3:"ccn";i:1;}s:55:"PHPUnit\Framework\stringEqualsStringIgnoringLineEndings";a:7:{s:4:"name";s:37:"stringEqualsStringIgnoringLineEndings";s:14:"namespacedName";s:55:"PHPUnit\Framework\stringEqualsStringIgnoringLineEndings";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:121:"stringEqualsStringIgnoringLineEndings(string $string): PHPUnit\Framework\Constraint\StringEqualsStringIgnoringLineEndings";s:9:"startLine";i:2550;s:7:"endLine";i:2553;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\countOf";a:7:{s:4:"name";s:7:"countOf";s:14:"namespacedName";s:25:"PHPUnit\Framework\countOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"countOf(int $count): PHPUnit\Framework\Constraint\Count";s:9:"startLine";i:2557;s:7:"endLine";i:2560;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\objectEquals";a:7:{s:4:"name";s:12:"objectEquals";s:14:"namespacedName";s:30:"PHPUnit\Framework\objectEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"objectEquals(object $object, string $method): PHPUnit\Framework\Constraint\ObjectEquals";s:9:"startLine";i:2564;s:7:"endLine";i:2567;s:3:"ccn";i:1;}s:21:"PHPUnit\Framework\any";a:7:{s:4:"name";s:3:"any";s:14:"namespacedName";s:21:"PHPUnit\Framework\any";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:56:"any(): PHPUnit\Framework\MockObject\Rule\AnyInvokedCount";s:9:"startLine";i:2575;s:7:"endLine";i:2578;s:3:"ccn";i:1;}s:23:"PHPUnit\Framework\never";a:7:{s:4:"name";s:5:"never";s:14:"namespacedName";s:23:"PHPUnit\Framework\never";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"never(): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2585;s:7:"endLine";i:2588;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\atLeast";a:7:{s:4:"name";s:7:"atLeast";s:14:"namespacedName";s:25:"PHPUnit\Framework\atLeast";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"atLeast(int $requiredInvocations): PHPUnit\Framework\MockObject\Rule\InvokedAtLeastCount";s:9:"startLine";i:2596;s:7:"endLine";i:2601;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\atLeastOnce";a:7:{s:4:"name";s:11:"atLeastOnce";s:14:"namespacedName";s:29:"PHPUnit\Framework\atLeastOnce";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"atLeastOnce(): PHPUnit\Framework\MockObject\Rule\InvokedAtLeastOnce";s:9:"startLine";i:2608;s:7:"endLine";i:2611;s:3:"ccn";i:1;}s:22:"PHPUnit\Framework\once";a:7:{s:4:"name";s:4:"once";s:14:"namespacedName";s:22:"PHPUnit\Framework\once";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"once(): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2618;s:7:"endLine";i:2621;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\exactly";a:7:{s:4:"name";s:7:"exactly";s:14:"namespacedName";s:25:"PHPUnit\Framework\exactly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"exactly(int $count): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2629;s:7:"endLine";i:2632;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\atMost";a:7:{s:4:"name";s:6:"atMost";s:14:"namespacedName";s:24:"PHPUnit\Framework\atMost";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"atMost(int $allowedInvocations): PHPUnit\Framework\MockObject\Rule\InvokedAtMostCount";s:9:"startLine";i:2640;s:7:"endLine";i:2643;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\returnValue";a:7:{s:4:"name";s:11:"returnValue";s:14:"namespacedName";s:29:"PHPUnit\Framework\returnValue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:71:"returnValue(mixed $value): PHPUnit\Framework\MockObject\Stub\ReturnStub";s:9:"startLine";i:2647;s:7:"endLine";i:2650;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnValueMap";a:7:{s:4:"name";s:14:"returnValueMap";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnValueMap";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"returnValueMap(array $valueMap): PHPUnit\Framework\MockObject\Stub\ReturnValueMap";s:9:"startLine";i:2654;s:7:"endLine";i:2657;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnArgument";a:7:{s:4:"name";s:14:"returnArgument";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnArgument";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"returnArgument(int $argumentIndex): PHPUnit\Framework\MockObject\Stub\ReturnArgument";s:9:"startLine";i:2661;s:7:"endLine";i:2664;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnCallback";a:7:{s:4:"name";s:14:"returnCallback";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnCallback";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"returnCallback(callable $callback): PHPUnit\Framework\MockObject\Stub\ReturnCallback";s:9:"startLine";i:2668;s:7:"endLine";i:2671;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\returnSelf";a:7:{s:4:"name";s:10:"returnSelf";s:14:"namespacedName";s:28:"PHPUnit\Framework\returnSelf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:58:"returnSelf(): PHPUnit\Framework\MockObject\Stub\ReturnSelf";s:9:"startLine";i:2680;s:7:"endLine";i:2683;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\throwException";a:7:{s:4:"name";s:14:"throwException";s:14:"namespacedName";s:32:"PHPUnit\Framework\throwException";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"throwException(Throwable $exception): PHPUnit\Framework\MockObject\Stub\Exception";s:9:"startLine";i:2687;s:7:"endLine";i:2690;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\onConsecutiveCalls";a:7:{s:4:"name";s:18:"onConsecutiveCalls";s:14:"namespacedName";s:36:"PHPUnit\Framework\onConsecutiveCalls";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"onConsecutiveCalls(): PHPUnit\Framework\MockObject\Stub\ConsecutiveCalls";s:9:"startLine";i:2694;s:7:"endLine";i:2699;s:3:"ccn";i:1;}}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:2701;s:18:"commentLinesOfCode";i:1339;s:21:"nonCommentLinesOfCode";i:1362;}s:15:"ignoredLinesFor";a:0:{}s:17:"executableLinesIn";a:373:{i:72;i:1;i:85;i:2;i:89;i:3;i:102;i:4;i:106;i:5;i:116;i:6;i:120;i:7;i:133;i:8;i:137;i:9;i:147;i:10;i:151;i:11;i:164;i:12;i:168;i:13;i:178;i:14;i:182;i:15;i:195;i:16;i:199;i:17;i:212;i:18;i:216;i:19;i:229;i:20;i:233;i:21;i:247;i:22;i:251;i:23;i:265;i:24;i:269;i:25;i:281;i:26;i:285;i:27;i:297;i:28;i:301;i:29;i:313;i:30;i:317;i:31;i:329;i:32;i:333;i:33;i:345;i:34;i:349;i:35;i:361;i:36;i:365;i:37;i:377;i:38;i:381;i:39;i:393;i:40;i:397;i:41;i:407;i:42;i:411;i:43;i:426;i:44;i:430;i:45;i:445;i:46;i:449;i:47;i:461;i:48;i:465;i:49;i:477;i:50;i:481;i:51;i:493;i:52;i:497;i:53;i:509;i:54;i:513;i:55;i:526;i:56;i:530;i:57;i:543;i:58;i:547;i:59;i:560;i:60;i:564;i:61;i:577;i:62;i:581;i:63;i:594;i:64;i:598;i:65;i:611;i:66;i:615;i:67;i:628;i:68;i:632;i:69;i:645;i:70;i:649;i:71;i:662;i:72;i:666;i:73;i:679;i:74;i:683;i:75;i:696;i:76;i:700;i:77;i:713;i:78;i:717;i:79;i:729;i:80;i:733;i:81;i:745;i:82;i:749;i:83;i:761;i:84;i:765;i:85;i:777;i:86;i:781;i:87;i:793;i:88;i:797;i:89;i:809;i:90;i:813;i:91;i:825;i:92;i:829;i:93;i:841;i:94;i:845;i:95;i:857;i:96;i:861;i:97;i:873;i:98;i:877;i:99;i:889;i:100;i:893;i:101;i:905;i:102;i:909;i:103;i:921;i:104;i:925;i:105;i:937;i:106;i:941;i:107;i:953;i:108;i:957;i:109;i:969;i:110;i:973;i:111;i:987;i:112;i:991;i:113;i:1005;i:114;i:1009;i:115;i:1023;i:116;i:1027;i:117;i:1041;i:118;i:1045;i:119;i:1059;i:120;i:1063;i:121;i:1077;i:122;i:1081;i:123;i:1093;i:124;i:1097;i:125;i:1109;i:126;i:1113;i:127;i:1125;i:128;i:1129;i:129;i:1141;i:130;i:1145;i:131;i:1157;i:132;i:1161;i:133;i:1181;i:134;i:1185;i:135;i:1199;i:136;i:1203;i:137;i:1223;i:138;i:1227;i:139;i:1246;i:140;i:1250;i:141;i:1265;i:142;i:1269;i:143;i:1284;i:144;i:1288;i:145;i:1303;i:146;i:1307;i:147;i:1322;i:148;i:1326;i:149;i:1341;i:150;i:1345;i:151;i:1360;i:152;i:1364;i:153;i:1379;i:154;i:1383;i:155;i:1398;i:156;i:1402;i:157;i:1417;i:158;i:1421;i:159;i:1436;i:160;i:1440;i:161;i:1455;i:162;i:1459;i:163;i:1474;i:164;i:1478;i:165;i:1493;i:166;i:1497;i:167;i:1512;i:168;i:1516;i:169;i:1531;i:170;i:1535;i:171;i:1550;i:172;i:1554;i:173;i:1569;i:174;i:1573;i:175;i:1588;i:176;i:1592;i:177;i:1607;i:178;i:1611;i:179;i:1626;i:180;i:1630;i:181;i:1645;i:182;i:1649;i:183;i:1664;i:184;i:1668;i:185;i:1683;i:186;i:1687;i:187;i:1702;i:188;i:1706;i:189;i:1718;i:190;i:1722;i:191;i:1734;i:192;i:1738;i:193;i:1753;i:194;i:1757;i:195;i:1772;i:196;i:1776;i:197;i:1786;i:198;i:1790;i:199;i:1802;i:200;i:1806;i:201;i:1818;i:202;i:1822;i:203;i:1834;i:204;i:1838;i:205;i:1850;i:206;i:1854;i:207;i:1868;i:208;i:1872;i:209;i:1884;i:210;i:1888;i:211;i:1902;i:212;i:1906;i:213;i:1921;i:214;i:1925;i:215;i:1940;i:216;i:1944;i:217;i:1954;i:218;i:1958;i:219;i:1968;i:220;i:1972;i:221;i:1982;i:222;i:1986;i:223;i:1996;i:224;i:2000;i:225;i:2015;i:226;i:2019;i:227;i:2034;i:228;i:2038;i:229;i:2052;i:230;i:2056;i:231;i:2069;i:232;i:2073;i:233;i:2086;i:234;i:2090;i:235;i:2103;i:236;i:2107;i:237;i:2120;i:238;i:2124;i:239;i:2137;i:240;i:2141;i:241;i:2153;i:242;i:2157;i:243;i:2169;i:244;i:2173;i:245;i:2185;i:246;i:2189;i:247;i:2201;i:248;i:2205;i:249;i:2217;i:250;i:2221;i:251;i:2233;i:252;i:2237;i:253;i:2249;i:254;i:2253;i:255;i:2265;i:256;i:2269;i:257;i:2272;i:258;i:2276;i:259;i:2279;i:260;i:2283;i:261;i:2286;i:262;i:2290;i:263;i:2293;i:264;i:2297;i:265;i:2300;i:266;i:2304;i:267;i:2307;i:268;i:2311;i:269;i:2314;i:270;i:2318;i:271;i:2321;i:272;i:2325;i:273;i:2328;i:274;i:2332;i:275;i:2335;i:276;i:2339;i:277;i:2342;i:278;i:2346;i:279;i:2349;i:280;i:2353;i:281;i:2356;i:282;i:2360;i:283;i:2363;i:284;i:2367;i:285;i:2370;i:286;i:2374;i:287;i:2377;i:288;i:2381;i:289;i:2384;i:290;i:2388;i:291;i:2391;i:292;i:2395;i:293;i:2398;i:294;i:2402;i:295;i:2405;i:296;i:2409;i:297;i:2412;i:298;i:2416;i:299;i:2419;i:300;i:2423;i:301;i:2426;i:302;i:2430;i:303;i:2433;i:304;i:2437;i:305;i:2440;i:306;i:2444;i:307;i:2447;i:308;i:2451;i:309;i:2454;i:310;i:2458;i:311;i:2461;i:312;i:2465;i:313;i:2468;i:314;i:2472;i:315;i:2475;i:316;i:2479;i:317;i:2482;i:318;i:2486;i:319;i:2489;i:320;i:2493;i:321;i:2496;i:322;i:2500;i:323;i:2503;i:324;i:2507;i:325;i:2510;i:326;i:2514;i:327;i:2517;i:328;i:2521;i:329;i:2524;i:330;i:2528;i:331;i:2531;i:332;i:2535;i:333;i:2538;i:334;i:2542;i:335;i:2545;i:336;i:2549;i:337;i:2552;i:338;i:2556;i:339;i:2559;i:340;i:2563;i:341;i:2566;i:342;i:2570;i:343;i:2577;i:344;i:2581;i:345;i:2587;i:346;i:2591;i:347;i:2598;i:348;i:2599;i:348;i:2600;i:348;i:2604;i:349;i:2610;i:350;i:2614;i:351;i:2620;i:352;i:2624;i:353;i:2631;i:354;i:2635;i:355;i:2642;i:356;i:2646;i:357;i:2649;i:358;i:2653;i:359;i:2656;i:360;i:2660;i:361;i:2663;i:362;i:2667;i:363;i:2670;i:364;i:2674;i:365;i:2682;i:366;i:2686;i:367;i:2689;i:368;i:2693;i:369;i:2696;i:370;i:2698;i:371;}}